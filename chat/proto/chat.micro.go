// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/chat.proto

/*
Package go_micro_srv_chat is a generated protocol buffer package.

It is generated from these files:
	proto/chat.proto

It has these top-level messages:
	RegisterRequest
	RegisterResponse
	UnregisterRequest
	UnregisterResponse
	Message
*/
package go_micro_srv_chat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ChatService service

type ChatService interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error)
	Unregister(ctx context.Context, in *UnregisterRequest, opts ...client.CallOption) (*UnregisterResponse, error)
	Socket(ctx context.Context, opts ...client.CallOption) (ChatService_SocketService, error)
}

type chatService struct {
	c    client.Client
	name string
}

func NewChatService(name string, c client.Client) ChatService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.chat"
	}
	return &chatService{
		c:    c,
		name: name,
	}
}

func (c *chatService) Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error) {
	req := c.c.NewRequest(c.name, "ChatService.Register", in)
	out := new(RegisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) Unregister(ctx context.Context, in *UnregisterRequest, opts ...client.CallOption) (*UnregisterResponse, error) {
	req := c.c.NewRequest(c.name, "ChatService.Unregister", in)
	out := new(UnregisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) Socket(ctx context.Context, opts ...client.CallOption) (ChatService_SocketService, error) {
	req := c.c.NewRequest(c.name, "ChatService.Socket", &Message{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &chatServiceSocket{stream}, nil
}

type ChatService_SocketService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Message) error
	Recv() (*Message, error)
}

type chatServiceSocket struct {
	stream client.Stream
}

func (x *chatServiceSocket) Close() error {
	return x.stream.Close()
}

func (x *chatServiceSocket) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *chatServiceSocket) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *chatServiceSocket) Send(m *Message) error {
	return x.stream.Send(m)
}

func (x *chatServiceSocket) Recv() (*Message, error) {
	m := new(Message)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ChatService service

type ChatServiceHandler interface {
	Register(context.Context, *RegisterRequest, *RegisterResponse) error
	Unregister(context.Context, *UnregisterRequest, *UnregisterResponse) error
	Socket(context.Context, ChatService_SocketStream) error
}

func RegisterChatServiceHandler(s server.Server, hdlr ChatServiceHandler, opts ...server.HandlerOption) error {
	type chatService interface {
		Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error
		Unregister(ctx context.Context, in *UnregisterRequest, out *UnregisterResponse) error
		Socket(ctx context.Context, stream server.Stream) error
	}
	type ChatService struct {
		chatService
	}
	h := &chatServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ChatService{h}, opts...))
}

type chatServiceHandler struct {
	ChatServiceHandler
}

func (h *chatServiceHandler) Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error {
	return h.ChatServiceHandler.Register(ctx, in, out)
}

func (h *chatServiceHandler) Unregister(ctx context.Context, in *UnregisterRequest, out *UnregisterResponse) error {
	return h.ChatServiceHandler.Unregister(ctx, in, out)
}

func (h *chatServiceHandler) Socket(ctx context.Context, stream server.Stream) error {
	return h.ChatServiceHandler.Socket(ctx, &chatServiceSocketStream{stream})
}

type ChatService_SocketStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Message) error
	Recv() (*Message, error)
}

type chatServiceSocketStream struct {
	stream server.Stream
}

func (x *chatServiceSocketStream) Close() error {
	return x.stream.Close()
}

func (x *chatServiceSocketStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *chatServiceSocketStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *chatServiceSocketStream) Send(m *Message) error {
	return x.stream.Send(m)
}

func (x *chatServiceSocketStream) Recv() (*Message, error) {
	m := new(Message)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
